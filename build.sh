#!/bin/bash
#
# Build and deploy script for Discord Bot
# 
# Prerequisites:
#   1. Copy build-sensitive.default.sh to build-sensitive.sh
#   2. Fill in your credentials in build-sensitive.sh
#   3. Install jq: brew install jq (macOS) or apt install jq (Linux)
#   4. Install sshpass: brew install hudochenkov/sshpass/sshpass (macOS) or apt install sshpass (Linux)
#   5. Setup systemd service on remote server (see warraft-discord.service)
#
# Usage:
#   ./build.sh
#
set -e

# Load sensitive configuration
if [ ! -f "build-sensitive.sh" ]; then
    echo "‚ùå File 'build-sensitive.sh' not found!"
    echo "üìù Copy 'build-sensitive.default.sh' to 'build-sensitive.sh' and fill in your credentials."
    exit 1
fi

source build-sensitive.sh

if ! command -v jq &> /dev/null; then
    echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è 'jq'. –£—Å—Ç–∞–Ω–æ–≤–∏: brew install jq"
    exit 1
fi

DIST_DIR="bin"

mkdir -p "$DIST_DIR"

echo "üêß Building for Linux (x86_64-unknown-linux-musl)..."
rustup target add x86_64-unknown-linux-musl &>/dev/null || true
cargo build --release --target x86_64-unknown-linux-musl
cp "target/x86_64-unknown-linux-musl/release/$PROJECT_NAME" "$DIST_DIR/$BINARY_NAME"

echo ""
echo "‚úÖ Build complete:"
ls -lh "$DIST_DIR"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è sshpass
if ! command -v sshpass &> /dev/null; then
    echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è 'sshpass'. –£—Å—Ç–∞–Ω–æ–≤–∏: brew install hudochenkov/sshpass/sshpass –∏–ª–∏ sudo apt install sshpass"
    exit 1
fi

TMP_FILE="$BINARY_NAME.tmp"
FINAL_FILE="$BINARY_NAME"

echo "üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $REMOTE_PATH –Ω–∞ $REMOTE_HOST..."
sshpass -p "$REMOTE_PASS" ssh -p "$REMOTE_PORT" "$REMOTE_USER@$REMOTE_HOST" bash <<EOF
  set -e
  if [ ! -d "$REMOTE_PATH" ]; then
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é..."
    mkdir -p "$REMOTE_PATH"
    chown $REMOTE_USER:$REMOTE_USER "$REMOTE_PATH"
    chmod 755 "$REMOTE_PATH"
  else
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
  fi
EOF

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã $SERVICE_NAME..."
sshpass -p "$REMOTE_PASS" ssh -p "$REMOTE_PORT" "$REMOTE_USER@$REMOTE_HOST" "
  systemctl stop $SERVICE_NAME || true
"

echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ($TMP_FILE)..."
sshpass -p "$REMOTE_PASS" scp -P "$REMOTE_PORT" "$DIST_DIR/$FINAL_FILE" "$REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/$TMP_FILE"

echo "üîÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ $TMP_FILE –≤ $FINAL_FILE –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤..."
sshpass -p "$REMOTE_PASS" ssh -p "$REMOTE_PORT" "$REMOTE_USER@$REMOTE_HOST" bash <<EOF
  set -e
  mv -f "$REMOTE_PATH/$TMP_FILE" "$REMOTE_PATH/$FINAL_FILE"
  chmod +x "$REMOTE_PATH/$FINAL_FILE"
  echo "‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ –∑–∞–º–µ–Ω—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É."
EOF

echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã $SERVICE_NAME..."
sshpass -p "$REMOTE_PASS" ssh -p "$REMOTE_PORT" "$REMOTE_USER@$REMOTE_HOST" "
  systemctl start $SERVICE_NAME
"

echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã $SERVICE_NAME..."
sshpass -p "$REMOTE_PASS" ssh -p "$REMOTE_PORT" "$REMOTE_USER@$REMOTE_HOST" "
  systemctl status $SERVICE_NAME --no-pager --full
"